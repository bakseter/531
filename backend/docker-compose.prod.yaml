version: '3.9'
services:
  backend:
    build: .
    image: 'ghcr.io/bakseter/531/backend:latest'
    # Don't start backend before database is up.
    depends_on:
      database:
        condition: service_healthy
    links:
      - database
    ports:
      - '8080:8080'
    environment:
      DATABASE_URL: 'postgres://postgres:${DB_PASSWORD:-password}@database/postgres'
      MIGRATE_DB: true

  backend_dev:
    build: .
    image: 'ghcr.io/bakseter/531/backend:latest'
    # Don't start backend before database is up.
    depends_on:
      database:
        condition: service_healthy
    links:
      - database
    ports:
      - '8081:8081'
    environment:
      DATABASE_URL: 'postgres://postgres:${DB_PASSWORD:-password}@database/postgres'
      DEV_ISSUER: 'http://localhost:8081'
      PORT: 8081
      DEV: true

  database:
    image: postgres:15.1-alpine
    restart: always
    ports:
      - '5432:5432'
    # Check if database is ready.
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: postgres

  caddy:
    image: caddy:2.6.2-alpine
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    volumes:
      - $PWD/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config

volumes:
  caddy_data:
  caddy_config:
  caddy_data_dev:
  caddy_config_dev:
