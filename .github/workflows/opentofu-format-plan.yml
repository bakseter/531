name: OpenTofu format & plan

on:
  pull_request:
    branches: [master]

defaults:
  run:
    working-directory: './opentofu'

jobs:
  opentofu-fmt-plan:
    name: 'OpenTofu format & plan'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      TF_VAR_revision_suffix: '"${{ github.sha }}"'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: OpenTofu fmt
        id: fmt
        run: tofu fmt -check
        continue-on-error: true

      - name: OpenTofu Init
        id: init
        run: tofu init

      - name: OpenTofu Validate
        id: validate
        run: tofu validate -no-color

      - name: OpenTofu Plan
        id: plan
        run: tofu plan -no-color
        continue-on-error: true

      - uses: actions/github-script@v7
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(
              (comment) =>
                comment.user.type === "Bot" &&
                comment.body.includes("OpenTofu Format and Style"),
            );

            const fmt = "${{ steps.fmt.outcome }}" === "success" ? "✅" : "❌";
            const init = "${{ steps.init.outcome }}" === "success" ? "✅" : "❌";
            const validate = "${{ steps.validate.outcome }}" === "success" ? "✅" : "❌";
            const plan = "${{ steps.plan.outcome }}" === "success" ? "✅" : "❌";

            const body = `#### 🖋️ OpenTofu Format and Style ${fmt}
            #### ⚙️ OpenTofu Initialization: ${init}
            #### 🤖 OpenTofu Validation: ${validate}
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### 📖 OpenTofu Plan: ${plan}

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>
            `;

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body,
              });
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body,
              });
            }
