name: Terraform format & plan

on:
  pull_request:
    branches: [master]
    paths: ["terraform/**", ".github/workflows/terraform_format_plan.yaml"]

permissions:
  pull-requests: write

jobs:
  terraform_format:
    name: "Terraform format"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Check format
        run: |
          cd terraform
          terraform fmt -check -recursive

  terraform_plan:
    name: "Terraform plan"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Plan main configuration
        id: tf_plan
        run: |
          cd terraform
          terraform init -lockfile=readonly
          terraform plan -lock-timeout=15m -no-color
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          TF_VAR_vercel_token: ${{ secrets.VERCEL_TOKEN }}
          TF_VAR_auth_secret: ${{ secrets.AUTH_SECRET }}
          TF_VAR_google_client_id: ${{ secrets.GOOGLE_CLIENT_ID }}
          TF_VAR_google_client_secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_revision_suffix: ${{ github.sha }}
          TF_VAR_environment: "prod"

      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.tf_plan.outputs.stdout }}"
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })

            const botComment = comments.find(comment =>
              comment.body.includes('<!-- TERRAFORM PLAN -->')
            )

            const output = `<!-- TERRAFORM PLAN -->

            #### ðŸ“– Terraform plan: \`${{ steps.tf_plan.outcome }}\`

            <details><summary>Show plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: output
              })
            }
