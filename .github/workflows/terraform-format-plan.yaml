name: Terraform format & plan

on:
  pull_request:
    branches: [master]

jobs:
  terraform_format:
    name: 'Terraform format'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Check format
        run: |
          cd terraform
          terraform fmt -check -recursive

  terraform_plan:
    name: 'Terraform plan'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      TF_CLOUD_ORGANIZATION: 'bakseter'
      TF_WORKSPACE: '531-prod'
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      TF_VAR_revision_suffix: '"${{ github.sha }}"'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Upload Terraform configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.0
        id: plan-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: './terraform'
          speculative: true

      - name: Create Terraform run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.0
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true

      - name: Get plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.3.0
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      - name: Update PR
        uses: actions/github-script@v7
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
            });

            const output = `#### Terraform Cloud plan output
               \`\`\`
               Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
               \`\`\`
               [Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
               `;

            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output,
            });
